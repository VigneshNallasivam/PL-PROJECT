//PROJECT-APIs
=============
JSON CREATION                 ==> GET    ==>   http://localhost:8000/api/project/json
ADDING PROJECT DETAILS        ==> POST   ==>   http://localhost:8000/api/project
EDITING PROJECT DETAILS       ==> PUT    ==>   http://localhost:8000/api/project/2
FETCHING PROJECT DETAIL BY ID ==> GET    ==>   http://localhost:8000/api/project/2
FETCHING ALL PROJECT DETAILS  ==> GET    ==>   http://localhost:8000/api/project
HARD-DELETE                   ==> DELETE ==>   http://localhost:8000/api/project/delete/2
SOFT-DELETE                   ==> DELETE ==>   http://localhost:8000/api/project/2 

//PROJECT JSONs
===============
PROJECT GENERAL JSON
{
	"id": null,
	"projectname": null,
	"start_date": null,
	"end_date": null,
	"budget": null,
	"bit_type": null,
	"working_hours": null,
	"manager_name": null,
	"project_status": null,
	"resource_id": null,
	"created_on": null,
	"created_by": null,
	"updated_on": null,
	"updated_by": null,
	"active": true,
	"supportingFiles": null,
	"project_resources": null
}
PROJECT-POST REQUEST
{
	"projectname":"PL",
	"start_date": "2023-05-01",
	"end_date": "2023-08-10",
	"budget": 25000.00,
	"bit_type": "hourly",
	"working_hours": 8.0,
	"manager_name": ["Project Manager"],
	"project_status": "On Going",
	"resource_id": 1,
	"supportingFiles":[{
			"id": 1,
			"supporting_files_name": "resource_data-1686900592632.xlsx",
			"supporting_files_url": "http://localhost:8000/api/fileupload/attachments?filename=resource_data-1686900592632.xlsx",
			"supporting_file_view_url": null,
			"mapped": false,
			"upload_by": "empten",
			"upload_on": "2023-06-16T12:59:52.6348139"
		}]
}
PROJECT-POST RESPONSE
{
	"statuscode": 200,
	"data": {
		"id": 5,
		"projectname": "PLs",
		"start_date": "2023-05-01",
		"end_date": "2023-08-10",
		"budget": 25000.0,
		"bit_type": "hourly",
		"working_hours": 8.0,
		"manager_name": [
			"Project Manager"
		],
		"project_status": "On Going",
		"resource_id": 1,
		"created_on": "2023-06-16T17:13:09.6875618",
		"created_by": "emp10",
		"updated_on": null,
		"updated_by": null,
		"active": true,
		"supportingFiles": [
			{
				"id": 1,
				"supporting_files_name": "resource_data-1686900592632.xlsx",
				"supporting_files_url": "http://localhost:8000/api/fileupload/attachments?filename=resource_data-1686900592632.xlsx",
				"supporting_file_view_url": null,
				"mapped": false
			}
		]
	},
	"message": "Project Details Added Successfully..!!",
	"status": true
}
PROJECT-PUT RESPONSE
{
	"statuscode": 200,
	"data": {
		"id": 2,
		"projectname": "PL Project",
		"start_date": "2023-05-01",
		"end_date": "2023-08-10",
		"budget": 15000.0,
		"bit_type": "hourly",
		"working_hours": 8.0,
		"manager_name": [
			"Project Manager"
		],
		"project_status": "On Going",
		"resource_id": 2,
		"created_on": "2023-06-16T13:42:06.424195",
		"created_by": "emp10",
		"updated_on": "2023-06-16T13:52:27.494139",
		"updated_by": "emp10",
		"active": true,
		"supportingFiles": [
			{
				"id": 1,
				"supporting_files_name": "resource_data-1686900592632.xlsx",
				"supporting_files_url": "http://localhost:8000/api/fileupload/attachments?filename=resource_data-1686900592632.xlsx",
				"supporting_file_view_url": null,
				"mapped": false
			}
		]
	},
	"message": "Project Data Updated Successfully",
	"status": true
}
//PROJECT-MODEL
===============
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.intelizign.pl.request.SupportingFiles;
import com.vladmihalcea.hibernate.type.json.JsonBinaryType;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "project_model")
@Data
@AllArgsConstructor
@NoArgsConstructor
@TypeDef(name = "jsonb", typeClass = JsonBinaryType.class)
public class ProjectModel 
{

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id", updatable = false, nullable = false)
	private Long id;
	
	@Column(name = "projectname",unique = true)
	private String projectname;
	
	@Column(name = "start_date")
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
	private LocalDate start_date;
	
	@Column(name = "end_date")
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
	private LocalDate end_date;
	
	@Column(name = "budget")
	private Double budget;
	
	@Column(name = "bit_type")
	private String bit_type;
	
	@Column(name = "working_hours")
	private Double working_hours;
	
	@Type(type = "jsonb")
	@Column(name = "manager_name",columnDefinition = "jsonb")
	private List<String> manager_name;
	
	@Column(name = "project_status")
	private String project_status;

	@Column(name = "resource_id")
	private Long resource_id;
	
	@Column(name = "created_on")
	private LocalDateTime created_on;

	@Column(name = "created_by")
	private String created_by;
	
	@Column(name = "updated_on")
	private LocalDateTime updated_on;
	
	@Column(name = "updated_by")
	private String updated_by;
	
	@Column(name = "active")
	private Boolean active = true;
	
	@Type(type = "jsonb")
	@Column(name = "supporting_files",columnDefinition = "jsonb")
	@Basic(fetch = FetchType.LAZY)
	private List<SupportingFiles> supportingFiles;
	
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@OnDelete(action = OnDeleteAction.CASCADE)
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@JoinColumn(name = "client_id")
	private ClientModel client;
	
	@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinTable(name = "project_resources", joinColumns = @JoinColumn(name = "project_id"), inverseJoinColumns = @JoinColumn(name = "resource_id"))
	@JsonIgnoreProperties("projects")
	private List<ResourceModel> project_resources;
	
	@ManyToOne(fetch = FetchType.LAZY, optional = false)
	@JoinColumn(name = "vertical_id", nullable = false)
	@JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
	@OnDelete(action = OnDeleteAction.CASCADE)
	@JsonBackReference
	private VerticalModel vertical;
}

//PROJECT-CONTROLLER
====================
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.Optional;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.intelizign.pl.authentication.UserDetailsImpl;
import com.intelizign.pl.model.ClientModel;
import com.intelizign.pl.model.FileUploadModel;
import com.intelizign.pl.model.ProjectModel;
import com.intelizign.pl.model.VerticalModel;
import com.intelizign.pl.repositories.ClientRepository;
import com.intelizign.pl.repositories.FileUploadRepository;
import com.intelizign.pl.repositories.ProjectRepository;
import com.intelizign.pl.repositories.VerticalRepository;
import com.intelizign.pl.request.SupportingFiles;
import com.intelizign.pl.response.ResponseHandler;


@RestController
@RequestMapping("/project")
public class ProjectController 
{
	Logger logger = LoggerFactory.getLogger(ProjectController.class);


	@Autowired
	private FileUploadRepository fileUploadRepository;

	@Autowired
	private ProjectRepository projectRepository;

	@Autowired
	private ClientRepository clientRepository;

	@Autowired
	private VerticalRepository verticalRepository;

	@Autowired
	private Environment environment;


    //JSON CREATION
	@GetMapping("/json")
	public ProjectModel getJSON(ProjectModel projectModel)
	{
		return projectModel;
	}

	//ADDING PROJECT DETAILS
	@PostMapping("/{clientid}/{verticalid}")
	public ResponseEntity<Object> createData(@Valid @RequestBody ProjectModel projectModel, @PathVariable Long clientid, @PathVariable Long verticalid,Authentication authentication)
	{
		try
		{
			UserDetailsImpl user = (UserDetailsImpl)authentication.getPrincipal();

			if (Boolean.TRUE.equals(projectRepository.existsByProjectname(projectModel.getProjectname()))) 
			{
				return ResponseHandler.generateResponse("Project-Name is already taken!",false,HttpStatus.OK,null);
			}
			
			//SETTING CLIENT DATA IN PROJECT
			Optional<ClientModel> clientData = clientRepository.findById(clientid);
			if(clientData.isPresent()) 
			{
				projectModel.setClient(clientData.get());
			}
			else
			{
				return ResponseHandler.generateResponse("Client Id Not Found",false,HttpStatus.OK,null);
			}
			
			//SETTING VERTICAL DATA IN PROJECT
			Optional<VerticalModel> verticalData = verticalRepository.findById(verticalid);
			if(verticalData.isPresent()) 
			{
				projectModel.setVertical(verticalData.get());				

			}
			else
			{
				return ResponseHandler.generateResponse("Vertical Id Not Found",false,HttpStatus.OK,null);
			}
			projectModel.setStart_date(projectModel.getStart_date());
			projectModel.setEnd_date(projectModel.getEnd_date());
			projectModel.setCreated_by(user.getUsername());
			projectModel.setCreated_on(LocalDateTime.now(ZoneId.of(environment.getProperty("spring.app.timezone"))));
			List<SupportingFiles> currentFile = projectModel.getSupportingFiles();
			
			if(!currentFile.isEmpty()) 
			{
				for(SupportingFiles fileData : currentFile)
				{
					if (Boolean.FALSE.equals(fileData.getMapped()))
					{

						Optional<FileUploadModel> fileuploadmodel = fileUploadRepository.findById(fileData.getId());
						if (fileuploadmodel.isPresent()) 
						{
							fileuploadmodel.get().setMapped(true);
							fileUploadRepository.save(fileuploadmodel.get());
						}
					}
				}

			}
			projectModel.setSupportingFiles(currentFile);
			ProjectModel projectModels = projectRepository.save(projectModel);
			return ResponseHandler.generateResponse("Project Details Added Successfully..!!",true,HttpStatus.OK, projectModels);
		}
		catch (Exception ex) 
		{
			logger.error("Error while Creating Project Details", ex.getMessage());
			return ResponseHandler.generateResponse("Internal Server Error, Please contact Admin",false,HttpStatus.OK,null);
		}
	}

	//EDITING PROJECT DETAILS
	@PutMapping("/{id}")
	public ResponseEntity<Object> updateData(@Valid @PathVariable Long id,@RequestBody ProjectModel projectModel,Authentication authentication)
	{
		try
		{
			UserDetailsImpl user = (UserDetailsImpl)authentication.getPrincipal();	
		    if (Boolean.TRUE.equals(clientRepository.existsByClientname(projectModel.getProjectname()))) 
			{
				return ResponseHandler.generateResponse("Project-Name is already taken",false,HttpStatus.OK,null);
			}

			Optional<ProjectModel> projectModels = projectRepository.findById(id);
			if(projectModels.isPresent())
			{
				projectModels.get().setProjectname(projectModel.getProjectname());
				projectModels.get().setStart_date(projectModel.getStart_date());
				projectModels.get().setEnd_date(projectModel.getEnd_date());
				projectModels.get().setBudget(projectModel.getBudget());
				projectModels.get().setBit_type(projectModel.getBit_type());
				projectModels.get().setWorking_hours(projectModel.getWorking_hours());
				projectModels.get().setManager_name(projectModel.getManager_name());
				projectModels.get().setProject_status(projectModel.getProject_status());
				projectModels.get().setResource_id(projectModel.getResource_id());
				projectModels.get().setUpdated_on(LocalDateTime.now(ZoneId.of(environment.getProperty("spring.app.timezone"))));
				projectModels.get().setUpdated_by(user.getUsername());
				projectModels.get().setActive(projectModel.getActive());
				projectRepository.save(projectModels.get());
				return ResponseHandler.generateResponse("Project Data Updated Successfully",true,HttpStatus.OK,projectModels);
			}
			else
			{
				return ResponseHandler.generateResponse("Project Id Not Found",false,HttpStatus.OK,null);
			}

		}
		catch (Exception ex) 
		{
			logger.error("Error while Updating Project Details", ex.getMessage());
			return ResponseHandler.generateResponse("Internal Server Error, Please contact Admin",false,HttpStatus.OK,null);
		}

	}

	//FETCHING PROJECT DETAIL BY ID
	@GetMapping("/{id}")
	public ResponseEntity<Object> getDataById(@PathVariable Long id)
	{
		try
		{
			Optional<ProjectModel> projectModels = projectRepository.findById(id);
			if(projectModels.isPresent())
			{
				return ResponseHandler.generateResponse("Project Data Retrived Successfully",true,HttpStatus.OK,projectModels);	
			}
			else
			{
				return ResponseHandler.generateResponse("Project Id Not found",false,HttpStatus.OK,null);	
			}

		}
		catch (Exception ex)
		{
			logger.error("Error while getting Project Details", ex.getMessage());
			return ResponseHandler.generateResponse("Internal Server Error, Please contact Admin",false,HttpStatus.OK,null);
		}
	}

	//FETCHING ALL PROJECT DETAILS
	@GetMapping("")
	public ResponseEntity<Object> getAllData(@PageableDefault(size = 10, page = 0, sort = "id", direction = Direction.ASC) Pageable pageable,
			@RequestParam(required = false) String searchKeyword)
	{
		try
		{
			Page<ProjectModel> clientList = projectRepository.findAllByPagination(pageable,searchKeyword);
			return ResponseHandler.generateResponse("All Project Data Retrived Successfully",true,HttpStatus.FOUND,clientList);
		}
		catch (Exception ex)
		{
			logger.error("Error while getting Project Details", ex.getMessage());
			return ResponseHandler.generateResponse("Internal Server Error, Please contact Admin",false,HttpStatus.OK,null);
		}
	}


	//HARD-DELETE
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<Object> deleteByIdHard(@PathVariable Long id)
	{
		try
		{
			if(projectRepository.findById(id).isPresent())
			{
				projectRepository.deleteById(id);
				return ResponseHandler.generateResponse("Project Data Deleted Successfully",true,HttpStatus.OK,null);
			}
			else
			{
				return ResponseHandler.generateResponse("Project Id Not Found",false,HttpStatus.OK,null);
			}
		}
		catch(Exception ex)
		{
			logger.error("Error while Deleting Project Details", ex.getMessage());
			return ResponseHandler.generateResponse("Internal Server Error, Please contact Admin",false,HttpStatus.OK,null);
		}
	}

	//SOFT-DELETE
	@DeleteMapping("/{id}")
	public ResponseEntity<Object> deleteByIdSoft(@PathVariable Long id)
	{
		try
		{
			Optional<ProjectModel> projectModel = projectRepository.findById(id);
			if(projectModel.isPresent()) 
			{
				projectModel.get().setActive(false);
				projectRepository.save(projectModel.get());
				return ResponseHandler.generateResponse("Project Data Deleted Successfully",true,HttpStatus.OK,null);
			}
			else
			{
				return ResponseHandler.generateResponse("Project ID Not Found",true,HttpStatus.OK,null);
			}

		}
		catch(Exception ex)
		{
			logger.error("Error while Deleting Project Details", ex.getMessage());
			return ResponseHandler.generateResponse("Internal Server Error, Please contact Admin",false,HttpStatus.OK,null);
		}
	}
}

//PROJECT-REPOSITORY
====================
import java.time.LocalDate;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import com.intelizign.pl.model.ProjectModel;

@Repository
public interface ProjectRepository extends JpaRepository<ProjectModel, Long>
{
	@Query("SELECT p FROM ProjectModel p WHERE "
			+ "LOWER(CONCAT(p.projectname,p.active,p.budget,p.bit_type,p.working_hours,p.manager_name,p.project_status)) LIKE %?1%  OR "
    		+ "UPPER(CONCAT(p.projectname,p.active,p.budget,p.bit_type,p.working_hours,p.manager_name,p.project_status)) LIKE %?1% AND "
    		+ "p.active = 'true'")
	Page<ProjectModel> findAllByPagination(Pageable pageable, String searchKeyword);
	
	Boolean existsByProjectname(String projectname);
	
	@Query("SELECT  p FROM ProjectModel p WHERE p.active = ?1")
	List<ProjectModel> findByActive(boolean active);
	
	@Query("SELECT  p FROM ProjectModel p WHERE p.active = ?1 AND p.end_date = ?2")
	List<ProjectModel> findByActiveAndEndDate(boolean active,LocalDate end_date);
}
